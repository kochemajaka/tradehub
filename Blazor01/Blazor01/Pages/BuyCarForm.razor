@using System.Net.Http
@inject HttpClient Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using tradehub.Domain.Model

@page "/buycar"

<style>
    .mt-3 {
        max-width: 300px; 
        margin-bottom: 10px; 
    }
</style>

<div class="container mt-4">
    <h4>Добавление нового автомобиля</h4>

    <div class="mb-3">
        <label for="CarName" class="form-label">Название:</label>
        <input id="CarName" @bind="newCar.Name" class="form-control" placeholder="Название автомобиля" />
    </div>

    <div class="mb-3">
        <label for="VIN" class="form-label">VIN:</label>
        <input id="VIN" @bind="newCar.VIN" class="form-control" placeholder="VIN автомобиля" />
    </div>

    <div class="mb-3">
        <label for="EmployeeId" class="form-label">Выбор сотрудника:</label>
        <select id="EmployeeId" @onchange="EmployeeSelectionChanged" class="form-select">
            @foreach (var employee in employees)
            {
                <option value="@employee.Id">@employee.Name</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label for="AccountName" class="form-label">Наименование счета:</label>
        <input id="AccountName" @bind="newDDS.Account" class="form-control" placeholder="Наименование счета" />
    </div>

    <div class="mb-3">
        <label for="PurchaseAmount" class="form-label">Сумма покупки:</label>
        <input id="PurchaseAmount" @bind="newDDS.Amount" class="form-control" placeholder="Сумма покупки" />
    </div>

    <button @onclick="AddCar" class="btn btn-primary">Добавить новый автомобиль</button>
</div>

        <div style="color: @(isSuccess ? "green" : "red")">@message</div>





@code {
    private Car newCar = new Car();
    private DDS newDDS = new DDS();
    private BuyCar newBuyCar = new BuyCar();
    string message = "";
    private bool isSuccess = false;
    private Guid selectedEmployeeId;
    private List<Employee> employees = new List<Employee>();

    protected override async Task OnInitializedAsync()
    {
        // Выполните HTTP GET запрос для получения списка сотрудников
        employees = await Http.GetFromJsonAsync<List<Employee>>("https://localhost:7225/api/Employee");
    }

    private async Task EmployeeSelectionChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out Guid selectedId))
        {
            // newBuyCar.Employees = new List<Employee> { new Employee { Id = selectedId, Name = "", Email = "", Phone = "", Salary = 0, Position = "" } };
            var selectedEmployee = employees.FirstOrDefault(e => e.Id == selectedId);
            if (selectedEmployee != null)
            {
                // теперь у нас есть объект selectedEmployee
                newBuyCar.Employees = new List<Employee> { selectedEmployee };
            }
        }
    }


    private async Task AddCar()
    {
        newCar.Status = "Sale";
        var response = await Http.PostAsJsonAsync("https://localhost:7225/api/Car", newCar);

        if (response.IsSuccessStatusCode)
        {
            var AddCar = await response.Content.ReadFromJsonAsync<Car>();
            if (AddCar != null)
            {
                newDDS.Cars.Add(AddCar);
                newDDS.Date = DateTime.Today;
                newDDS.Type = "buy car";
                newDDS.IsProfit = false;
                newDDS.Note = "";

                var responseDDS = await Http.PostAsJsonAsync("https://localhost:7225/api/DDS", newDDS);
                if (responseDDS.IsSuccessStatusCode)
                {
                    var AddDDS = await responseDDS.Content.ReadFromJsonAsync<DDS>();
                    if (AddDDS != null)
                    {
                        newBuyCar.Cars.Add(AddCar);
                        newBuyCar.BuyRow.Add(AddDDS);
                        newBuyCar.BuyedOn = "Генеральный";

                        var responseBC = await Http.PostAsJsonAsync("https://localhost:7225/api/BuyCar", newBuyCar);
                        if (responseBC.IsSuccessStatusCode)
                        {
                            isSuccess = true;
                        }
                        else
                        {
                            var error = await response.Content.ReadFromJsonAsync<Error>();
                            if (error != null) message = error.Details;
                        }

                    }
                    else
                    {
                        var error = await response.Content.ReadFromJsonAsync<Error>();
                        if (error != null) message = error.Details;
                    }
                }
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<Error>();
                if (error != null) message = error.Details;
            }

        }
    }


    class Error
    {
        public string Details { get; set; } = "";
    }


}