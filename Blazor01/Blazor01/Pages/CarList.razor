@using System.Net.Http
@inject HttpClient Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using tradehub.Domain.Model
@inject NavigationManager NavigationManager

@page "/viewcar"

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous" />

<h3>Список автомобилей</h3>

@if (fulfil)
{
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Название</th>
                <th>VIN</th>
                <th>Статус</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var car in cars)
            {
                <tr>
                    <td>@car.Name</td>
                    <td>@car.VIN</td>
                    <td>@car.Status</td>
                    <td>
                        <button class="btn btn-info" @onclick="() => Info(car.Id)">Инфо</button>
                        <button class="btn btn-warning" @onclick="() => StartEditing(car)">Редактировать</button>
                        <button class="btn btn-danger" @onclick="() => DeleteCar(car.Id)">Удалить</button>
                    </td>
                </tr>
                @if (editingCar != null && editingCar.Id == car.Id)
                {
                    <tr>
                        <td><input @bind="editingCar.Name" /></td>
                        <td><input @bind="editingCar.VIN" /></td>
                        <td><input @bind="editingCar.Status" /></td>
                        <td>
                            <button @onclick="SaveChanges">OK</button>
                            <button @onclick="CancelEdit">Отмена</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}
else
{
    <p>Загрузка данных...</p>
}

@code {
    private IEnumerable<Car> cars;
    private Car editingCar;
    private bool fulfil = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cars = await Http.GetFromJsonAsync<IEnumerable<Car>>("https://localhost:7225/api/Car");
            fulfil = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке данных: {ex.Message}");
        }
    }

    private async Task DeleteCar(Guid carId)
    {
        var response = await Http.DeleteAsync($"https://localhost:7225/api/Car/{carId}");

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Автомобиль успешно удален: {carId}");
            cars = cars.Where(c => c.Id != carId).ToList();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Ошибка при удалении автомобиля: {response.StatusCode}");
        }
    }

    private void StartEditing(Car car)
    {
        editingCar = new Car
            {
                Id = car.Id,
                Name = car.Name,
                VIN = car.VIN,
                Status = car.Status
            };
    }

    private void Info(Guid carId)
    {
        NavigationManager.NavigateTo($"/carinfo/{carId}");
    }

    private async Task SaveChanges()
    {
        var response = await Http.PutAsJsonAsync($"https://localhost:7225/api/Car/{editingCar.Id}", editingCar);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Изменения сохранены для автомобиля: {editingCar.Id}");
            editingCar = null;
            cars = await Http.GetFromJsonAsync<IEnumerable<Car>>("https://localhost:7225/api/Car");
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            Console.WriteLine($"Ошибка при сохранении изменений для автомобиля: {response.StatusCode}");
        }
    }

    private void CancelEdit()
    {
        editingCar = null;
        StateHasChanged();
    }
}
