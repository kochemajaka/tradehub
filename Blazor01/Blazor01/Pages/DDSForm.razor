@using System.Net.Http
@inject HttpClient Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using tradehub.Domain.Model
@inject NavigationManager NavigationManager

@page "/ddsform"

<div class="container mt-3">
    <h3>Добавление новой записи DDS</h3>

    <div class="mb-3">
        <label for="CarId" class="form-label">Выбор автомобиля:</label>
        <select id="CarId" @onchange="CarSelectionChanged" class="form-select">
            @foreach (var car in cars.Where(c => c.Status == "Sale"))
            {
                <option value="@car.Id">@car.Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label>Тип транзакции:</label>
        <div class="form-check">
            <input class="form-check-input" type="radio" id="income" checked="@(!newDDS.IsProfit)" @onchange="ToggleTransactionType" />
            <label class="form-check-label" for="income">Расход</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="radio" id="expense" checked="@newDDS.IsProfit" @onchange="ToggleTransactionType" />
            <label class="form-check-label" for="expense">Приход</label>
        </div>
    </div>

    <div class="form-group">
        <label for="TransactionType">Цель транзакции:</label>
        <select class="form-control" id="TransactionType" @bind="newDDS.Type">
            @if (newDDS.IsProfit)
            {
                foreach (var parameter in incomeParameters)
                {
                    <option value="@parameter">@parameter</option>
                }
            }
            else
            {
                foreach (var parameter in expenseParameters)
                {
                    <option value="@parameter">@parameter</option>
                }
            }
        </select>
    </div>

    <div class="form-group">
        <label for="Amount">Сумма:</label>
        <input class="form-control" id="Amount" @bind="newDDS.Amount" placeholder="Сумма" />
    </div>

    <div class="form-group">
        <label for="Account">Наименование счета:</label>
        <input class="form-control" id="Account" @bind="newDDS.Account" placeholder="Наименование счета" />
    </div>

    <div class="form-group">
        <label for="Note">Примечание:</label>
        <input class="form-control" id="Note" @bind="newDDS.Note" placeholder="Примечание" />
    </div>
</div>
    <button class="btn btn-primary" @onclick="AddDDS">Добавить новую запись DDS</button>


@code {
    private Car car = new Car();
    private List<Car> cars = new List<Car>(); 
    private List<string> incomeParameters = new List<string> { "Продажа доп. оборудования", "Продажа шин" }; 
    private List<string> expenseParameters = new List<string> { "Малярка", "Полировка", "Операционные расходы" };
    private DDS newDDS = new DDS();

    protected override async Task OnInitializedAsync()
    {
        cars = await Http.GetFromJsonAsync<List<Car>>("https://localhost:7225/api/Car");
    }

    private async Task CarSelectionChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out Guid selectedId))
        {
            var selectedCar = cars.FirstOrDefault(e => e.Id == selectedId);
            if (car != null)
            {
                newDDS.Cars = new List<Car> { selectedCar };
                car = selectedCar;
            }
        }
    }

    private async Task AddDDS()
    {
        if (newDDS.Note == null)
            newDDS.Note = "";
        newDDS.Date = DateTime.Today;
        var response = await Http.PostAsJsonAsync("https://localhost:7225/api/DDS", newDDS);

        if (response.IsSuccessStatusCode) { }
        else
        {
            var error = await response.Content.ReadFromJsonAsync<Error>();

        }

    }

    private void ToggleTransactionType()
    {
        newDDS.IsProfit = !newDDS.IsProfit;
    }

    class Error
    {
        public string Details { get; set; } = "";
    }
}
