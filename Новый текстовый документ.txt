    private Car newCar = new Car();
    private DDS newDDS = new DDS();
    private BuyCar newBuyCar = new BuyCar();
    string message = "";
    private Guid selectedEmployeeId;
    private List<Employee> employees = new List<Employee>();

    protected override async Task OnInitializedAsync()
    {
        // Выполните HTTP GET запрос для получения списка сотрудников
        employees = await Http.GetFromJsonAsync<List<Employee>>("https://localhost:7225/api/Employee");
    }

    private async Task EmployeeSelectionChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out Guid selectedId))
        {
            selectedEmployeeId = selectedId;
            newBuyCar.Employees = new List<Employee> { new Employee { Id = selectedEmployeeId } };
        }
    }

    private async Task AddCar()
    {
        newCar.Status = "Sale";
        var response = await Http.PostAsJsonAsync("https://localhost:7225/api/Car", newCar);

        if (response.IsSuccessStatusCode)
        {
            var AddCar = await response.Content.ReadFromJsonAsync<Car>();
            if (AddCar != null) {
                newDDS.Cars.Add(AddCar);
                newDDS.Date = DateTime.Today;
                newDDS.Type = "buy car";
                newDDS.IsProfit = false;
                newDDS.Note = "";

                var responseDDS = await Http.PostAsJsonAsync("https://localhost:7225/api/DDS", newDDS);
                if (responseDDS.IsSuccessStatusCode)
                {
                    var AddDDS = await responseDDS.Content.ReadFromJsonAsync<DDS>();
                    if (AddDDS != null)
                    {
                        newBuyCar.Cars.Add(AddCar);
                        newBuyCar.BuyRow.Add(AddDDS);

                        await Http.PostAsJsonAsync("https://localhost:7225/api/BuyCar", newBuyCar);
                    }
                    else
                    {
                        var error = await response.Content.ReadFromJsonAsync<Error>();
                        if (error != null) message = error.Details;
                    }
                }
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<Error>();
                if (error != null) message = error.Details;
            }

        }
    }

@code {
    private Car newCar = new Car();
    private DDS newDDS = new DDS();
    private BuyCar newBuyCar = new BuyCar();
    string message = "";
    private Guid selectedEmployeeId;
    private List<Employee> employees = new List<Employee>();

    protected override async Task OnInitializedAsync()
    {
        // Выполните HTTP GET запрос для получения списка сотрудников
        employees = await Http.GetFromJsonAsync<List<Employee>>("https://localhost:7225/api/Employee");
    }

    private async Task EmployeeSelectionChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out Guid selectedId))
        {
            // newBuyCar.Employees = new List<Employee> { new Employee { Id = selectedId, Name = "", Email = "", Phone = "", Salary = 0, Position = "" } };
            var selectedEmployee = employees.FirstOrDefault(e => e.Id == selectedId);
            if (selectedEmployee != null)
            {
                // теперь у нас есть объект selectedEmployee
                newBuyCar.Employees = new List<Employee> { selectedEmployee };
            }
        }
    }

    private async Task AddCar()
    {
        newCar.Status = "Sale";
        newDDS.Cars.Add(newCar);
        newDDS.Date = DateTime.Today;
        newDDS.Type = "buy car";
        newDDS.IsProfit = false;
        newDDS.Note = "";
        newBuyCar.Cars.Add(newCar);
        newBuyCar.BuyRow.Add(newDDS);
        newBuyCar.BuyedOn = "Генеральный";
        //await Http.PostAsJsonAsync("https://localhost:7225/api/DDS", newDDS);
        var response = await Http.PostAsJsonAsync("https://localhost:7225/api/BuyCar", newBuyCar);
        if (response.IsSuccessStatusCode)
        { }
        else
        {
            var error = await response.Content.ReadFromJsonAsync<Error>();
            if (error != null) message = error.Details;
        }


    }

    class Error
    {
        public string Details { get; set; } = "";
    }


}